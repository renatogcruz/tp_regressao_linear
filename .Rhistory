"nortest",
"rgl",
"car",
"olsrr",
"jtools",
"ggstance",
"magick",
"cowplot",
"beepr",
"Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
setwd("C:/Users/Renato/OneDrive/github/especializacao_estatistica_aplicada/open_applied_stat/4_regressão_linear/tp")
#--
# leitura do banco de dados
planos <- read.csv(file = "planosaude.csv")
#--
# OBSERVANDO OS DADOS CARREGADOS DO DATASET
planos %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# Visualizando as observações e as especificações referentes às variáveis
# do dataset
glimpse(planos)
# Estatísticas univariadas
summary(planos)
#--
#  análise descritiva exploratória
# Vamos criar uma base temporária para manter a base original intacta
pls <- planos
# Podemos também usar o comando str( ) para visualizarmos a estrutura desse
# data frame, as variáveis e seus tipos
str(tmp)
#--
#  análise descritiva exploratória
# Vamos criar uma base temporária para manter a base original intacta
tmp <- planos
# Podemos também usar o comando str( ) para visualizarmos a estrutura desse
# data frame, as variáveis e seus tipos
str(tmp)
# Matriz de gráficos no pacote
# https://rpubs.com/melinatarituba/353262
ggpairs(tmp, lower = list(continuous = "smooth")) ## isso é legal pq da pra ver
#--
# Pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
'gtools',
"fastDummies",
"knitr",
"kableExtra",
"splines",
"reshape2",
"PerformanceAnalytics",
"metan",
"correlation",
"see",
"ggraph",
"nortest",
"rgl",
"car",
"olsrr",
"jtools",
"ggstance",
"magick",
"cowplot",
"beepr",
"Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Matriz de gráficos no pacote
# https://rpubs.com/melinatarituba/353262
ggpairs(tmp, lower = list(continuous = "smooth")) ## isso é legal pq da pra ver
# ESTUDO DAS CORRELAÇÕES
chart.Correlation((planosaude[2:5]), histogram = TRUE)
# ESTUDO DAS CORRELAÇÕES
chart.Correlation((plano[2:5]), histogram = TRUE)
# ESTUDO DAS CORRELAÇÕES
chart.Correlation((planos[2:5]), histogram = TRUE)
# OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude
glimpse(planos)
#Estatísticas univariadas
summary(planos)
#Categorias da variável 'plano'
levels(factor(planos$plano))
#Tabela de frequências absolutas da variável 'plano'
table(planos$plano)
# ESTUDO DAS CORRELAÇÕES
chart.Correlation((planos[2:5]), histogram = TRUE)
# PROCEDIMENTO N-1 DUMMIES
planos_dummies <- dummy_columns(.data = planos,
select_columns = "plano",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
#Visualizando a base de dados dummizada
planos_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
# ESTIMAÇÃO DA REGRESSÃO LINEAR MÚLTIPLA
#Modelagem com todas as variáveis
modelo_planosaude <- lm(despmed ~ . - id, planos_dummies)
#Parâmetros do modelo_planosaude
summary(modelo_planosaude)
# PROCEDIMENTO STEPWISE
step_planosaude <- step(modelo_planosaude, k = 3.841459)
summary(step_planosaude)
# TESTE DE VERIFICAÇÃO DA ADERÊNCIA DOS RESÍDUOS À NORMALIDADE
#Teste de Shapiro-Francia
sf.test(step_planosaude$residuals) #função sf.test do pacote nortest
#Plotando os resíduos do modelo step_planosaude
planosaude %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
labs(x = "Resíduos",
y = "Frequências") +
theme_bw()
#Plotando os resíduos do modelo step_planosaude
planos %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
labs(x = "Resíduos",
y = "Frequências") +
theme_bw()
#Acrescentando uma curva normal teórica para comparação entre as distribuições
planos %>%
mutate(residuos = step_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#55C667FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_planosaude$residuals),
sd = sd(step_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Kernel density estimation (KDE) - forma não-paramêtrica para estimar a
#função densidade de probabilidade de uma variável aleatória
planos_dummies %>%
ggplot() +
geom_density(aes(x = step_planosaude$residuals), fill = "#55C667FF") +
labs(x = "Resíduos do Modelo Stepwise",
y = "Densidade") +
theme_bw()
# DIAGNÓSTICO DE HETEROCEDASTICIDADE
#Teste de Breusch-Pagan para diagnÃ³stico de heterocedasticidade
ols_test_breusch_pagan(step_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_planosaude'
#no dataset 'planosaude_dummies'
planos_dummies$fitted_step <- step_planosaude$fitted.values
planos_dummies$residuos_step <- step_planosaude$residuals
#Gráfico que relaciona resíduos e fitted values do modelo 'step_planosaude'
planos_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step, y = residuos_step),
color = "#55C667FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise",
y = "Resíduos do Modelo Stepwise") +
theme_bw()
# TRANSFORMAçÃO DE BOX-COX
#Para calcular o lambda de Box-Cox
lambda_BC <- powerTransform(planos$despmed)
lambda_BC
#Inserindo o lambda de Box-Cox na nova base de dados para a estimaÃ§Ã£o de um
#novo modelo
planos_dummies$bcdespmed <- (((planos$despmed ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
#Visualizando a nova variÃ¡vel na base de dados
planos_dummies %>%
select(id, despmed, bcdespmed, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#Estimando um novo modelo múltiplo com dummies
modelo_bc_planosaude <- lm(formula = bcdespmed ~ . -id -despmed -fitted_step
-residuos_step,
data = planosaude_dummies)
#Estimando um novo modelo múltiplo com dummies
modelo_bc_planosaude <- lm(formula = bcdespmed ~ . -id -despmed -fitted_step
-residuos_step,
data = planos_dummies)
#Parâmetros do modelo
summary(modelo_bc_planosaude)
#Aplicando o procedimento Stepwise
step_bc_planosaude <- step(modelo_bc_planosaude, k = 3.841459)
summary(step_bc_planosaude)
#Verificando a normalidade dos resíduos do modelo step_bc_planosaude
#Teste de Shapiro-Francia
sf.test(step_bc_planosaude$residuals) #funÃ§Ã£o sf.test do pacote nortest
#Plotando os novos resíduos do modelo step_bc_planosaude com curva normal teÃ³rica
planos_dummies %>%
mutate(residuos = step_bc_planosaude$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 15,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(step_bc_planosaude$residuals),
sd = sd(step_bc_planosaude$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
#Kernel density estimation (KDE)
planos_dummies %>%
ggplot() +
geom_density(aes(x = step_bc_planosaude$residuals), fill = "#440154FF") +
labs(x = "Resíduos do Modelo Stepwise com Transformação de Box-Cox",
y = "Densidade") +
theme_bw()
#Diagnóstico de Heterocedasticidade para o Modelo Stepwise com Box-Cox
ols_test_breusch_pagan(step_bc_planosaude)
#Adicionando fitted values e resíduos do modelo 'step_bc_planosaude'
#no dataset 'planosaude_dummies'
planosaude_dummies$fitted_step_novo <- step_bc_planosaude$fitted.values
#Adicionando fitted values e resíduos do modelo 'step_bc_planosaude'
#no dataset 'planosaude_dummies'
planos_dummies$fitted_step_novo <- step_bc_planosaude$fitted.values
planos_dummies$residuos_step_novo <- step_bc_planosaude$residuals
#GrÃ¡fico que relaciona resíduos e fitted values do modelo 'step_bc_planosaude'
planos_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step_novo, y = residuos_step_novo),
color = "#440154FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox",
y = "Resíduos do Modelo Stepwise com TransformaÃ§Ã£o de Box-Cox") +
theme_bw()
#GrÃ¡fico que relaciona resíduos e fitted values do modelo 'step_bc_planosaude'
planos_dummies %>%
ggplot() +
geom_point(aes(x = fitted_step_novo, y = residuos_step_novo),
color = "#440154FF", size = 3) +
labs(x = "Fitted Values do Modelo Stepwise com Transformação de Box-Cox",
y = "Resíduos do Modelo Stepwise com Transformação de Box-Cox") +
theme_bw()
#--
# OBSERVANDO OS DADOS CARREGADOS DO DATASET
planos %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 12)
#--
# Pacotes utilizados
pacotes <- c("plotly",
"tidyverse",
"ggrepel",
'gtools',
"fastDummies",
"knitr",
"kableExtra",
"splines",
"reshape2",
"PerformanceAnalytics",
"metan",
"correlation",
"see",
"ggraph",
"nortest",
"rgl",
"car",
"olsrr",
"jtools",
"ggstance",
"magick",
"cowplot",
"beepr",
"Rcpp",
'GGally')
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
ggpairs(planos, lower = list(continuous = "smooth"))
# OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude
glimpse(planos)
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Taxa de sobreviventes") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
#--
#  análise descritiva exploratória
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="despmed", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Taxa de sobreviventes") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("renda")
#--
#  análise descritiva exploratória
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="despmed", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Despesas médicas") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("renda")
descritiva("idade")
descritiva("dcron")
descritiva("renda")
descritiva("plano")
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="plano", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Despesas médicas") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("idade")
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="plano", groupvars=c(var))
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="despmed", groupvars=c(var))
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="despmed", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Despesas médicas") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("idade")
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="plano", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=plano, ymin=plano-se, ymax=plano+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=plano, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=plano, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Despesas médicas") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("idade")
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(planos, measurevar="despmed", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=despmed, ymin=despmed-se, ymax=despmed+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=despmed, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Despesas médicas") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("idade")
